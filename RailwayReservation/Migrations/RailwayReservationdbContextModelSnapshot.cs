// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RailwayReservation.Context;

#nullable disable

namespace RailwayReservation.Migrations
{
    [DbContext(typeof(RailwayReservationdbContext))]
    partial class RailwayReservationdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RailwayReservation.Model.Domain.Passenger", b =>
                {
                    b.Property<Guid>("PassengerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PassengerId");

                    b.HasIndex("SeatId");

                    b.HasIndex("TicketId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("RailwayReservation.Model.Domain.Route", b =>
                {
                    b.Property<Guid>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Destination")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("Source")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RouteId");

                    b.HasIndex("Destination");

                    b.HasIndex("Source");

                    b.HasIndex("TrainId")
                        .IsUnique();

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("RailwayReservation.Model.Domain.Seat", b =>
                {
                    b.Property<Guid>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TrainId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SeatId");

                    b.HasIndex("TrainId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("RailwayReservation.Model.Domain.Station", b =>
                {
                    b.Property<Guid>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Pincode")
                        .HasColumnType("int");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StationType")
                        .HasColumnType("int");

                    b.HasKey("StationId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("RailwayReservation.Model.Domain.Ticket", b =>
                {
                    b.Property<Guid>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Destination")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JourneyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("Source")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<Guid>("TrainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TicketId");

                    b.HasIndex("Destination");

                    b.HasIndex("Source");

                    b.HasIndex("TrainId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("RailwayReservation.Model.Domain.Train", b =>
                {
                    b.Property<Guid>("TrainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<int>("Fare")
                        .HasColumnType("int");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.Property<string>("TrainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainNumber")
                        .HasColumnType("int");

                    b.Property<int>("TrainStatus")
                        .HasColumnType("int");

                    b.Property<int>("TrainType")
                        .HasColumnType("int");

                    b.HasKey("TrainId");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("RailwayReservation.Model.Domain.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("WalletBalance")
                        .HasColumnType("float");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RouteStation", b =>
                {
                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StationsStationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RouteId", "StationsStationId");

                    b.HasIndex("StationsStationId");

                    b.ToTable("RouteStations", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Model.Domain.Passenger", b =>
                {
                    b.HasOne("RailwayReservation.Model.Domain.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RailwayReservation.Model.Domain.Ticket", null)
                        .WithMany("Passengers")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("RailwayReservation.Model.Domain.Route", b =>
                {
                    b.HasOne("RailwayReservation.Model.Domain.Station", "DestinationStation")
                        .WithMany()
                        .HasForeignKey("Destination")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RailwayReservation.Model.Domain.Station", "SourceStation")
                        .WithMany()
                        .HasForeignKey("Source")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RailwayReservation.Model.Domain.Train", null)
                        .WithOne("TrainRoute")
                        .HasForeignKey("RailwayReservation.Model.Domain.Route", "TrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationStation");

                    b.Navigation("SourceStation");
                });

            modelBuilder.Entity("RailwayReservation.Model.Domain.Seat", b =>
                {
                    b.HasOne("RailwayReservation.Model.Domain.Train", "Train")
                        .WithMany("Seats")
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Train");
                });

            modelBuilder.Entity("RailwayReservation.Model.Domain.Ticket", b =>
                {
                    b.HasOne("RailwayReservation.Model.Domain.Station", "DestinationStation")
                        .WithMany()
                        .HasForeignKey("Destination")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RailwayReservation.Model.Domain.Station", "SourceStation")
                        .WithMany()
                        .HasForeignKey("Source")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RailwayReservation.Model.Domain.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RailwayReservation.Model.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationStation");

                    b.Navigation("SourceStation");

                    b.Navigation("Train");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RouteStation", b =>
                {
                    b.HasOne("RailwayReservation.Model.Domain.Route", null)
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RailwayReservation.Model.Domain.Station", null)
                        .WithMany()
                        .HasForeignKey("StationsStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RailwayReservation.Model.Domain.Ticket", b =>
                {
                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("RailwayReservation.Model.Domain.Train", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("TrainRoute")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
